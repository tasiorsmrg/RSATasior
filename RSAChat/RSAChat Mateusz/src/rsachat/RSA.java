package rsachat;
import java.math.BigInteger;

public class RSA {
  private BigInteger x, z, c;
  private int bitlen = 1024;

  public RSA()
  {//czesc wspolna klucza pub i priv
     z = new BigInteger("88533635176785469865669243327020313864283498251018599845139719589902812231795678274383951368963348355576634454757281663886770508938348489433917037860368540078504005870837362326639698010178181765643449471096485851342384279109477635267617231354561662452742796481409667980384681228741045627390098769035451955449");
     c = new BigInteger("11");//klucz pub.
     x = new BigInteger("8048512288798679078697203938820028533116681659183509076830883599082073839254152570398541033542122577779694041341571060353342773539849862675810639805488047337392375897270339730675152558770107037129121136797871120026446373670993436362546382375241492125033836838959098884861078638551643812541503045139800063231");
  }//klucz priv.
  
  //wzory na enkrypcje i deskrypcje
  public synchronized BigInteger decrypt(BigInteger message) {
    return message.modPow(x, z);
  }
  public synchronized BigInteger encrypt(BigInteger message) {
    return message.modPow(c, z);
  }
  
  public static void main(String[] args) {
 
  }
}

   
    